# 챕터 5
#시각적 비교
library(Lahman)
a<-subset(Batting,
playerID=="rodrial01"|playerID=="pujolal01"|playerID=="mcgwima01")
a$name<-factor(a$playerID,levels=c("rodrial01","pujolal01","mcgwima01"), 
labels=c("Rodriguez","Pujols","McGwire"))
boxplot(a$HR~a$name)
boxplot(HR~name, data=a)
fivenum(a$HR[a$playerID=="pujolal01"])

# 모델에 영향을 주는 이상치를 찾아라
library(Lahman)
a<-subset(Teams, teamID=="PIT")
a$AVG<-a$H/a$AB
b<-lm(R~AVG,data=a)
plot(b)
plot(b, which=4)

# 메이저리그 140년 역사의 원동력: 표준편차의 힘
par(mfrow=c(1,2))
x<-seq(0.15,0.35,0.01)
y<-dnorm(x,0.25,0.03)
plot(x,y,xlab="AVG",ylab="Frequency",
main="Less competitive (SD=0.03)",type="l")
t<-seq(0.15,0.35,0.01)
u<-dnorm(x,0.25,0.02)
plot(t,u,xlab="AVG",ylab="Frequency",
main="Highly competitive (SD=0.02)",type="l")

# 시즌타율 3할의 효과 40년간의 관찰: 패키지 plyr
library(Lahman)
library(plyr)
a<-subset(Batting,yearID>1975&yearID<2017,select=c("yearID","AB","H","G"))
a$avg<-a$H/a$AB
a<-na.omit(a)
func<-function(a){return(data.frame(
sd=sd(a$avg[a$AB>400]),mean=mean(a$avg[a$AB>400])))}
env<-ddply(a, .(yearID), func)
env$z<-(0.3-env$mean)/env$sd
env$per<-pnorm(0.3,env$mean,env$sd, lower.tail=TRUE)

# 그림 5.11 시즌별 3할의 표준점수와 백분위수 변화를 보여주는 시계열 그래프
par(mfrow=c(1,2))
plot(env$yearID,env$z,xlab="year",ylab="z score of 0.3 AVG")
lines(smooth.spline(env$yearID,env$z))
plot(env$yearID,env$per,xlab="year",ylab="Percentile of 0.3 AVG")
lines(smooth.spline(env$yearID,env$per))

# 시즌타율 표준편차가 적을수록 야구장에 관중들이 더 모인다?
b<-subset(Teams,yearID>1975&yearID<2017,
select=c("teamID","G","yearID","attendance"))
b$att<-(b$attendance/b$G)
c<-subset(b,teamID=="ATL"|teamID=="BAL"|teamID=="BOS"|teamID=="CHA"|
teamID=="CHN"|teamID=="CIN"|teamID=="CLE"|teamID=="DET"|
teamID=="HOU"|teamID=="KCA"|teamID=="LAN"|teamID=="MIN"|
teamID=="NYA"|teamID=="NYN"|teamID=="OAK"|teamID=="PHI"|
teamID=="PIT"|teamID=="SDN"|teamID=="SFN"|teamID=="SLN"|
teamID=="TEX")

func_1<-function(c){return(data.frame(sum=sum(c$att)))}
attend<-ddply(c, .(yearID), func_1)
attend$apg<-attend$sum/21
d<-merge(env,attend,by="yearID")
d$lag_apg<-as.numeric(sapply(1:nrow(d),function(x){d$apg[x-1]}))
d$ratio<-d$apg/d$lag_apg
d<-subset(d,!(yearID==1976|yearID==1994|yearID==1995|yearID==1996))
summary(lm(ratio~sd+mean+yearID,data=d))

# 그리 5.14 시즌별 타율 편차와 팀별 게임당 관중수의 선형관계
plot(d$sd,d$ratio,ylab="Change in attendance",xlab="AVG standard deviation")
abline(lm(ratio~sd,data=d))

# 실험군은 아메리카리그, 대조군은 내셔널리그
install.packages("pwr")
library(pwr)
power.t.test(NULL,0.2,2,.05,0.95,type=c("two.sample"))
library(Lahman)
a<-subset(Batting,yearID>1972)
b<-subset(a,lgID=="AL"&G>10)
c<-subset(a,lgID=="NL"&G>10)
d<-sample(1:nrow(b), size=2600)
e<-sample(1:nrow(c), size=2600)
g<-b[d,]
h<-c[e,]
i<-rbind(g,h)
i$lgID<-as.character(i$lgID)
table(i$lgID)
boxplot(HBP~lgID,data=i,main="HBP comparison")
t.test(i$HBP[i$lgID=="AL"],i$HBP[i$lgID=="NL"])
a<-subset(Batting,yearID>1972)
b<-subset(a,G>10)
mean(b$HBP[b$lgID=="AL"])
mean(b$HBP[b$lgID=="NL"])

# 그룹간 비교 시각화 방법: 패널차트
install.packages(“ggplot2”)
library(ggplot2)
library(Lahman)
a<-subset(Teams,yearID>1990)
b<-a$attendance/162
affiliation<-paste(a$lgID,a$divID)
c<-cbind(a,b,affiliation)
ggplot(c, aes(b))+geom_density()+labs(x="attendance per game")
+geom_vline(xintercept=c(11800,14500,18700),linetype="dashed")

# 그림 5.17 지구별 게임당 관중수를 보여주는 패널 확률분포곡선
ggplot(c,aes(b))+geom_density()
+labs(x="attendance per game")
+theme(axis.text.x=element_blank())+facet_grid(.~affiliation)

# 그림 5.18 지구별 시즌 승수가 관중수에 미치는 영향
ggplot(c,aes(c$W,c$b))+geom_point(size=0.5)
+stat_smooth(method="lm",col="black")+facet_wrap(~affiliation)
+labs(x="Games won", y="Attendance per game")

t.test(b[affiliation=="NL W"],b[affiliation=="AL C"])
t.test(b[affiliation=="AL E"],b[affiliation=="NL C"])
d<-subset(c,c$affiliation==c("NL W","AL E","NL C","AL C"))
boxplot(d$b~d$affiliation)

# 구글 트렌드와 분산분석 연계 - 책을 보면서 실행하기를 추천드립니다.
pop <- read_csv("C:/Desktop/pop.csv") # 해당파일은 직접 구글 트렌드에서 다운받아서 import해야 합니다.
a<-strsplit(as.character(pop$Week),”-”)
## 그림 5.25 세로로 정렬된 날짜 데이터 행의 갯수가 6개인 경우
b<-data.frame(matrix(unlist(a), ncol=6, byrow=TRUE))
## 그림 5.25 세로로 정렬된 날짜 데이터 행의 갯수가 2개인 경우
b<-data.frame(matrix(unlist(a), ncol=2, byrow=TRUE))
c<-cbind(pop, b)
d<-c[!(c$X2==1)&!(c$X2==2)&!(c$X2==3)&!(c$X2==10)&!(c$X2==11)&!(c$X2==12),]
attach(d)
e<-data.frame(PHI,BOS,NYY,LAD,SF)
e<-data.frame(PHI,BOS,NYY,LAD,SF)
boxplot(e)
f<-stack(e)
g<-aov(values~ind, data=f)
summary(g)
TukeyHSD(g, which="ind")

#데이터를 분리해 필요한 부분만 취하다: 스트링 변수
player<-c("A","B","C","D","E","F")
AVG<-c(0.315,0.257,0.266,0.198,0.227,0.305)
HR<-c(20,6,14,6,7,15)
a<-data.frame(player,AVG,HR)
str(a)
a$class<-substr(a$AVG,3,3)
View(a)
b<-subset(a,class==2)
b$playerclass<-paste(b$player,b$class)
View(b)
library(Lahman)
a<-subset(Teams,yearID>1990)
a$ERA<-format(a$ERA,digits=3)
b<-strsplit(as.character(a$ERA),"\\.")
c<-data.frame(matrix(unlist(b),ncol=2,byrow=TRUE))

Team_name<-c("Atlanta Braves","Baltimore Orioles","Boston Red Sox")
b<-substr(team_name,7,9)
b

b<-substr(a,2,nchar(a)-3)
b

a<-c("Atlanta","Baltimore","Boston")
b<-c("Braves","Orioles","Red Sox")
c<-paste(a,b)
c
c<-paste(a,b,sep="")
c

# 내셔널리그, 아메리칸리그, 그리고 판별분석
library(Lahman)
b<-subset(Batting, yearID>1998&yearID<2012&AB>250)
b$X2Br<-b$X2B/b$AB
b<-subset(b,lgID=="AL"|lgID=="NL")
b$lgID<-ifelse(b$lgID=="AL",1,0)
b<-data.frame(b$yearID,b$X2Br,b$HBP,b$lgID)
colnames(b)<-c("yearID","X2Br","HBP","lgID")
b<-na.omit(b)
train<-subset(b,!(yearID==2011))
test<-subset(b,yearID==2011)
var_train=train[c(2,3)]
var_test=test[c(2,3)]
lg.train=train$lgID
lg.test=test$lgID

#선형판별모델 생성 및 검증 코딩
library(MASS)
ldafit<-lda(lgID~X2Br+HBP,data=test)
ldapred<-predict(ldafit)
a<-table(ldapred$class,test$lgID)
a
(a[1,1]+a[2,2])/(a[1,1]+a[2,1]+a[1,2]+a[2,2])

#비선형 2차함수판별모델quadratic discriminant analysis 생성 및 검증 코딩
qdafit<-qda(lgID~X2Br+HBP, data=test)
qdapred<-predict(qdafit)
b<-table(qdapred$class,test$lgID)
b
(b[1,1]+b[2,2])/(b[1,1]+b[2,1]+b[1,2]+b[2,2])

# KNN 판별모델 개발 및 검증 코딩
library(class)
knnpred<-knn(var_train,var_test,lg.train,k=3)
c<-table(knnpred,lg.test)
c
(c[1,1]+c[2,2])/(c[1,1]+c[2,1]+c[1,2]+c[2,2])

# 지구에서 우승할 가능성, 우승하지 못할 가능성: 로지스틱 회귀분석
x<--5:5
y<-1/(1+exp(-x))
plot(x,y,lines(x,y, type="b"))

library(Lahman)
a<-subset(Teams, Teams$yearID>2014)
a$d_win<-ifelse(a$DivWin=="Y",1,0)
div<-(glm(d_win~ERA,data=a,family=binomial(link="logit")))
summary(div)

#그림 5.37 로지스틱 회귀모델을 이용한 기대확률함수
b<-data.frame(success=a$d_win, ERA=a$ERA, fit=predict(div,a))
b$prob<-exp(b$fit)/(1+exp(b$fit))
c<-data.frame(ERA=seq(min(a$ERA),max(a$ERA)))
c$d_win<-predict(div,newdata=c, type="response")
library(ggplot2)
ggplot(b, aes(x=b$ERA,y=b$success))+
geom_point()+geom_line(aes(x=b$ERA,y=b$prob))

#지구에서 우승할 팀, 우승하지 못할 팀, 그리고 딥러닝
library(Lahman)
Teams$AVG<-Teams$H/Teams$AB
Teams$X3R<-Teams$X3B/Teams$AB
Teams$RR<-Teams$R/Teams$RA
b<-subset(Teams, yearID>1900&yearID<2016)
b<-data.frame(b$yearID,b$DivWin,b$ERA,b$AVG,b$X3R,b$RR)
colnames(b)<-c("yearID","DivWin","ERA","AVG","X3R","RR")
b<-na.omit(b)
train<-subset(b,!(yearID<2016&yearID>1995))
test<-subset(b,yearID<2016&yearID>1995)

#신경망 알고리즘
library(nnet)
train$ID_a = class.ind(train$DivWin)
test$ID_b = class.ind(test$DivWin)
fitnn = nnet(ID_a~ERA+AVG+X3R+RR, train, size=3, softmax=TRUE)
c<-table(data.frame(predicted=predict(fitnn,test)[,2]>0.5,
actual=test$ID_b [,2]>0.5))
c
(c[1,1]+c[2,2])/(c[1,1]+c[1,2]+c[2,1]+c[2,2])

#신경망 가중치
library(neuralnet)
b$win=b$DivWin=="Y"
b$not_win=b$DivWin=="N"
d<-neuralnet(win+not_win~ERA+AVG+X3R+RR, b, hidden=3,stepmax=1e6)
d$result.matrix
plot(d)

#자율학습을 활용한 군집분석
library(Lahman)
team<-subset(Teams,yearID==2015, select=c(teamID,X2B,X3B,ERA,RA))
rownames(team) <- team[,1]
team[,1]<-NULL
team_st<-scale(team)
install.packages("factoextra")
library(factoextra)
fviz_nbclust(team_st,kmeans,method="gap_stat")
residual<-kmeans(team_st,3,nstart=25)
residual
fviz_cluster(residual,data=team_st)
library(FactoMineR)
pca.res<-PCA(team_st, graph=FALSE)
fviz_contrib(pca.res, choice="var", axes=1,top=4)
fviz_contrib(pca.res, choice="var", axes=2,top=4)





